# 应用服务 WEB 访问端口
server:
  port: 8523

spring:
  shardingsphere:
    mode:
      type: Standalone
    datasource:
      names: ds0,ds1
      ds0:
        type: com.zaxxer.hikari.HikariDataSource
        #type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/devdb_0?tinyInt1isBit=false&useUnicode=true&characterEncoding=UTF-8
        username: devlop
        password: qwer1234
      ds1:
        type: com.zaxxer.hikari.HikariDataSource
        #type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/devdb_1?tinyInt1isBit=false&useUnicode=true&characterEncoding=UTF-8
        username: devlop
        password: qwer1234
    rules:
      sharding:
        tables:
          user_info:
            actual-data-nodes: ds$->{0..1}.user_info_$->{0..2}
            database-strategy:
              standard:
                sharding-column: user_id # 分库的列名
                sharding-algorithm-name: db_sharding_algorithm # 引用的分库算法名称
            # 分表策略
            table-strategy:
              standard:
                sharding-column: user_id # 分表的列名
                sharding-algorithm-name: table_sharding_algorithm # 引用的分表算法名称
            key-generate-strategy:
              column: user_id # 主键列名
              key-generator-name: snowflake_users
        sharding-algorithms:
          # 自定义分库算法
          db_sharding_algorithm:
            type: INLINE # 内联表达式算法
            props:
              algorithm-expression: ds$->{user_id % 2} # 根据 user_id 模 2 分到 ds0 或 ds1
              # allow-range-query-with-inline-sharding: true # 是否允许范围查询，谨慎开启，可能导致全路由

          # 自定义分表算法
          table_sharding_algorithm:
            type: INLINE
            props:
              algorithm-expression: user_info_$->{user_id % 3} # 根据 order_id 模 2 分到 t_order_0 或 t_order_1
      # binding-tables: user_info
      # broadcast-tables: t_address 什么东西？？？
        key-generators:
          # 定义一个名为 "snowflake_orders" 的雪花算法生成器
          snowflake_orders:
            type: SNOWFLAKE # 指定算法类型为雪花算法
            props: # 特定算法的属性配置
              worker-id: 1 # 工作节点ID (0-1023)，需要保证每个 ShardingSphere 实例的 worker-id 不同
              # max-tolerate-time-difference-milliseconds: 0 # 最大容忍的时间回拨毫秒数 (可选)

          # 定义一个名为 "snowflake_users" 的雪花算法生成器 (可以为不同业务模块或表使用不同的worker-id范围)
          snowflake_users:
            type: SNOWFLAKE
            props:
              worker-id: 10 # 另一个worker-id

          # 定义一个 UUID 生成器
          uuid_generator:
            type: UUID

          # 定义一个 NANOID 生成器
          nanoid_generator:
            type: NANOID
            # props: (NANOID 通常不需要额外配置)
    props:
      sql-show: true

  mybatis-plus:
    mapper-locations: classpath*:mapper/*.xml
    global-config:
      #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
      id-type: 0
      #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
      field-strategy: 1
      #驼峰下划线转换
      db-column-underline: true
      #刷新mapper 调试神器
      refresh-mapper: false
      db-config:
        id-type: auto
        field-strategy: NOT_EMPTY
        db-type: MYSQL
        logic-delete-field: deleted # 全局逻辑删除字段名
        logic-delete-value: 1 # 逻辑已删除值
        logic-not-delete-value: 0 # 逻辑未删除值
    configuration:
      map-underscore-to-camel-case: true
      call-setters-on-nulls: true
      cache-enabled: true
      log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

mybatis-plus:
  mapper-locations: classpath*:mapper/*.xml
  configuration:
    map-underscore-to-camel-case: true